using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using NSAP_ODK.Utilities;
using Microsoft.Win32;
using NSAP_ODK.Entities.Database;
using System.Windows.Threading;
using NSAP_ODK.Entities.Database.FromJson;
using System.Windows.Media;
using System.Diagnostics;

namespace NSAP_ODK.Views
{

    public enum ODKServerDownload
    {
        ServerDownloadVesselUnload,
        ServerDownloadLandings
    }
    /// <summary>
    /// Interaction logic for ODKResultsWindow.xaml
    /// </summary>
    public partial class ODKResultsWindow : Window
    {
        private static ODKResultsWindow _instance;
        private List<VesselLanding> _mainSheets;
        private List<LandingSiteBoatLandingFromServer> _mainSheetsLanding;
        private string _excelDownloaded;
        private bool _isJSONData;
        private int _savedCount;
        private ODKServerDownload _odkServerDownload;

        public ODKServerDownload ODKServerDownload
        {
            get { return _odkServerDownload; }
            set
            {
                _odkServerDownload = value;
                //menuView.Visibility = Visibility.Visible;
            }
        }
        public MainWindow ParentWindow { get; set; }
        public static ODKResultsWindow GetInstance()
        {
            if (_instance == null)
            {
                _instance = new ODKResultsWindow();
            }
            return _instance;
        }
        public ODKResultsWindow()
        {
            InitializeComponent();
            Loaded += OnWindowLoaded;
            Closed += OnWindowClosed;

        }
        protected override void OnSourceInitialized(EventArgs e)
        {
            base.OnSourceInitialized(e);
            this.ApplyPlacement();
        }
        private void OnWindowClosed(object sender, EventArgs e)
        {

            _instance = null;
        }

        private string GetJsonTextFileFromFileOpenDialog()
        {
            OpenFileDialog opf = new OpenFileDialog();
            opf.Title = "Open json file generated by ODK Collect";
            opf.Filter = "Json (*.json)|*.json";
            opf.FilterIndex = 1;
            if ((bool)opf.ShowDialog(this))
            {
                return opf.FileName;
            }
            else
            {
                return "";
            }
        }
        private void GetExcelFromFileOpen()
        {
            OpenFileDialog opf = new OpenFileDialog();
            opf.Title = "Open Excel file generated by ODK Collect";
            opf.Filter = "Excel (*.xlsx)|*.xlsx|Excel (*.xls)|*.xls";
            opf.FilterIndex = 1;
            if ((bool)opf.ShowDialog(this))
            {
                _isJSONData = false;
                ImportExcel.ExcelFileName = opf.FileName;
                if (ImportExcel.ExcelMainSheets.Count > 0)
                {
                    //we uncheck and check to force menu check to proceed
                    menuViewEffort.IsChecked = false;
                    menuViewEffort.IsChecked = true;   
                }
                else
                {
                    dataGridExcel.ItemsSource = null;
                    dataGridExcel.Items.Clear();
                    MessageBox.Show("Imported excel file does not contain ODK data\r\n" +
                                     "or uses a different format for saving ODK data",
                                     "Excel file import error",
                                     MessageBoxButton.OK,
                                     MessageBoxImage.Information); ;
                }
            }
        }
        private void OnWindowLoaded(object sender, RoutedEventArgs e)
        {
            Title = "Manage NSAP-ODK data";
            labelProgress.Content = "";
            ImportExcel.UploadSubmissionToDB += OnUploadSubmissionToDB;
            VesselUnloadServerRepository.UploadSubmissionToDB += OnUploadSubmissionToDB;
            labelDuplicated.Content = string.Empty;
            if (Debugger.IsAttached)
            {
                menuClearTables.Visibility = Visibility.Visible;
                menuTest.Visibility = Visibility.Visible;
                menuTestctw.Visibility = Visibility.Visible;
            }

            menuView.Visibility = Visibility.Collapsed;
        }


        private void SetMenuViewVisibility()
        {
            menuView.Visibility = Visibility.Visible;
            foreach (var item in menuView.Items)
            {
                if (item.GetType().Name == "MenuItem")
                {
                    var menu = (MenuItem)item;
                    menu.Visibility = Visibility.Collapsed;
                    switch (_odkServerDownload)
                    {
                        case ODKServerDownload.ServerDownloadVesselUnload:
                            if(!menu.Name.Contains("menuViewLandingSite"))
                            {
                                menu.Visibility = Visibility.Visible;
                            }
                            break;
                        case ODKServerDownload.ServerDownloadLandings:
                            if (menu.Name.Contains("menuViewLandingSite"))
                            {
                                menu.Visibility = Visibility.Visible;
                            }
                            break;
                    }
                }
            }
        }
        public List<LandingSiteBoatLandingFromServer>MainSheetsLanding
        {
            get { return _mainSheetsLanding; }
            set
            {
                
                menuSaveToExcel.Visibility = Visibility.Visible;
                _mainSheetsLanding = value;
                _isJSONData = true;

                if(menuViewLandingSiteSampling.IsChecked)
                {
                    ShowResultFromAPI("landingSiteSampling");
                }
                else
                {
                    menuViewLandingSiteSampling.IsChecked = true;
                }
                SetMenuViewVisibility();
            }

            
        }
        public List<VesselLanding> MainSheets
        {
            get { return _mainSheets; }
            set
            {
                menuSaveToExcel.Visibility = Visibility.Visible;
                _mainSheets = value;
                _isJSONData = true;

                menuDuplicatedEffortSpecs.IsEnabled = VesselUnloadServerRepository.DuplicatedEffortSpec.Count > 0;
                menuDuplicatedCatchComp.IsEnabled = VesselUnloadServerRepository.DuplicatedCatchComposition.Count > 0;
                menuDuplicatedLF.IsEnabled = VesselUnloadServerRepository.DuplicatedLenFreq.Count > 0;

                if (menuViewEffort.IsChecked)
                {
                    ShowResultFromAPI("effort");
                }
                else
                {
                    menuViewEffort.IsChecked = true;
                }
                SetMenuViewVisibility();
            }
        }
        public string ExcelFileDownloaded {
            get { return _excelDownloaded; }
            set 
            {
                menuSaveToExcel.Visibility = Visibility.Collapsed;
                _isJSONData = false;
                _excelDownloaded =value;
                ImportExcel.ExcelFileName = _excelDownloaded;
                if(menuViewEffort.IsChecked)
                {
                    //ShowResultFromAPI("effort");
                    ShowResultFromExcel("effort");
                }
                else
                { 
                    menuViewEffort.IsChecked = true;
                 }
                
            } 
        }
        private async void OnMenuClick(object sender, RoutedEventArgs e)
        {
            switch (((MenuItem)sender).Name)
            {
                case "menuUploadMedia":
                    var serverForm = new DownloadFromServerWindow(this);
                    VesselUnloadServerRepository.ResetLists();
                    serverForm.ServerIntent = ServerIntent.IntentUploadMedia;
                    serverForm.Owner = this;
                    serverForm.ShowDialog();
                    break;
                case "menuTestctw":
                    try
                    {
                        var json = System.IO.File.ReadAllText(GetJsonTextFileFromFileOpenDialog());
                        if (json.Length > 0)
                        {
                            LandingSiteBoatLandingsFromServerRepository.CreateLandingSiteBoatLandingsFromJson(json);
                            ODKServerDownload = ODKServerDownload.ServerDownloadLandings;
                            MainSheetsLanding = LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings;
                        }
                    }
                    catch
                    {
                        //ignore
                    }
                    break;
                case "menuTest":
                    try
                    {
                        var json = System.IO.File.ReadAllText(GetJsonTextFileFromFileOpenDialog());
                        if (json.Length > 0)
                        {
                            VesselUnloadServerRepository.ResetLists();
                            VesselUnloadServerRepository.CreateLandingsFromJSON(json);
                            VesselUnloadServerRepository.FillDuplicatedLists();
                            ODKServerDownload = ODKServerDownload.ServerDownloadVesselUnload;
                            MainSheets = VesselUnloadServerRepository.VesselLandings;
                        }
                    }
                    catch
                    {
                        //ignore
                    }
                    break;
                case "menuSaveToExcel":
                    if(dataGridExcel.ItemsSource!=null)
                    {
                            string filePath;
                            string exportResult;
                            if (ExportExcel.GetSaveAsExcelFileName(this, out filePath))
                            {
                                EntitiesToDataTables.VesselLandings = VesselUnloadServerRepository.VesselLandings;
                                if (ExportExcel.ExportDatasetToExcel(EntitiesToDataTables.GenerateDataSeFromImport(), filePath))
                                {
                                    exportResult = "Successfully exported to excel";
                                }
                                else
                                {
                                    exportResult = $"Was not successfull in exporting to excel\r\n{ExportExcel.ErrorMessage}";
                                }

                                MessageBox.Show(exportResult, "Export", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                        
                        
                    }
                    break;
                case "menuDownloadFromServer":
                    serverForm = new DownloadFromServerWindow(this);
                    VesselUnloadServerRepository.ResetLists();
                    serverForm.Owner = this;
                    serverForm.ShowDialog();
                    break;
                case "menuClearTables":
                    if(ImportExcel.ClearNSAPDatabaseTables())
                    {
                        MessageBox.Show("All repo cleared");
                    }
                    break;
                case "menuUpload":
                    bool success = false;
                    labelProgress.Content = "";

                    if (ODKServerDownload == ODKServerDownload.ServerDownloadVesselUnload)
                    {
                        if (_isJSONData)
                        {
                            if (dataGridExcel.Items.Count > 0)
                            {
                                if (await VesselUnloadServerRepository.UploadToDBAsync())
                                {
                                    dataGridExcel.ItemsSource = null;
                                    dataGridExcel.ItemsSource = VesselUnloadServerRepository.VesselLandings;
                                    success = true;
                                    MessageBox.Show("Finished uploading to database", "Upload done", MessageBoxButton.OK, MessageBoxImage.Information);
                                }
                                else if (_savedCount == 0 && VesselUnloadServerRepository.VesselLandings.Count > 0)
                                {
                                    MessageBox.Show("All records already saved to the database");
                                }
                                else
                                {
                                    MessageBox.Show("No records were saved even though at least one should have been saved.\r\nPls contact developer");
                                }
                            }
                            else
                            {
                                MessageBox.Show("You do not have any downloaded data", "No data", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                        }
                        else
                        {
                            if (dataGridExcel.Items.Count == 0)
                            {
                                MessageBox.Show("You do not have any downloaded data", "No data", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                            else
                            {
                                if (await ImportExcel.UploadToDatabaseAsync())
                                {
                                    dataGridExcel.ItemsSource = null;
                                    dataGridExcel.ItemsSource = ImportExcel.ExcelMainSheets;
                                    success = true;
                                    MessageBox.Show("Finished uploading to database", "Upload done", MessageBoxButton.OK, MessageBoxImage.Information);
                                }
                                else if (_savedCount == 0)
                                {
                                    MessageBox.Show("Zero records were saved because all have been saved earlier");
                                }
                            }
                        }
                    }
                    else if(ODKServerDownload==ODKServerDownload.ServerDownloadLandings)
                    {
                        if(_isJSONData)
                        {
                            if(await LandingSiteBoatLandingsFromServerRepository.UploadToDBAsync())
                            {
                                dataGridExcel.ItemsSource = null;
                                dataGridExcel.ItemsSource = LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings;
                                success = true;
                                MessageBox.Show("Finished uploading to database", "Upload done", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                            else if (_savedCount == 0 && LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings.Count > 0)
                            {
                                MessageBox.Show("All records already saved to the database");
                            }
                            else
                            {
                                MessageBox.Show("No records were saved even though at least one should have been saved.\r\nPls contact developer");
                            }
                        }
                    }

                    if(success)
                    {
                        ParentWindow.RefreshDownloadHistory();
                    }
                    break;
                case "menuImport":
                    GetExcelFromFileOpen();
                    break;
                case "menuClose":
                    Close();
                    break;
            }
        }

        private void OnUploadSubmissionToDB(object sender, UploadToDbEventArg e)
        {
            switch(e.Intent)
            {
                case UploadToDBIntent.EndOfUpload:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              progressBar.Value = 0;
                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              labelProgress.Content = $"Finished uploading {e.VesselUnloadTotalSavedCount} submissions";
                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);


                    _savedCount = e.VesselUnloadTotalSavedCount;
                    break;
                case UploadToDBIntent.StartOfUpload:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              progressBar.Maximum = e.VesselUnloadToSaveCount;
                              //do what you need to do on UI Thread
                              return null;
                          }), null);

                    break;
                case UploadToDBIntent.Uploading:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                            {
                               progressBar.Value = e.VesselUnloadSavedCount;
                               //do what you need to do on UI Thread
                               return null;       
                             }
                         ), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              labelProgress.Content=$"Uploading {(int)progressBar.Value} of {(int)progressBar.Maximum} submissions";
                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);


                    break;

            }
        }
        private void ShowResultFromAPI(string result)
        {
            DataGridTextColumn col;
            dataGridExcel.ItemsSource = null;
            dataGridExcel.Columns.Clear();
            dataGridExcel.IsReadOnly = true;
            dataGridExcel.AutoGenerateColumns = false;
            switch (result)
            {

                case "landingSiteSampling":
                    dataGridExcel.ItemsSource = LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings;
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "RowUUID", Binding = new Binding("_uuid"), Visibility = Visibility.Hidden });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("_submission_time"),
                        Header = "Date and time submitted"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("SavedInLocalDatabase") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Device ID", Binding = new Binding("device_id") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Form version", Binding = new Binding("intronote") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SamplingDate"),
                        Header = "Sampling date"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Sampling day", Binding = new Binding("SamplingConducted") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("NSAPRegionName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("NSAPEnumeratorName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("FMA") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("FishingGround") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Notes", Binding = new Binding("Notes") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });

                    break;
                case "landingSiteCounts":
                    dataGridExcel.ItemsSource = LandingSiteBoatLandingsFromServerRepository.GetLandings();
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    
                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Sampling date"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Sampling day", Binding = new Binding("Parent.SamplingConducted") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("Parent.NSAPRegionName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("Parent.NSAPEnumeratorName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.FMA") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Gear", Binding = new Binding("GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Vessels landed", Binding = new Binding("Count") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Total catch weight", Binding = new Binding("TotalCatchWt") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Notes", Binding = new Binding("Note") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("SavedInLocalDatabase") });
                    //dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent", Binding = new Binding("Parent.PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    break;
                case "effort":
                    dataGridExcel.ItemsSource = VesselUnloadServerRepository.VesselLandings;
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "RowUUID", Binding = new Binding("_uuid"), Visibility = Visibility.Hidden });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("_submission_time"),
                        Header = "Date and time submitted"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("SavedInLocalDatabase") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Device ID", Binding = new Binding("device_id") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Form version", Binding = new Binding("intronote") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SamplingDate"),
                        Header = "Sampling date"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("EnumeratorName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("GearName") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Fishing boat is used", Binding = new Binding("IsBoatUsed") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Sector") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Successful trip", Binding = new Binding("TripIsSuccess") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight of catch", Binding = new Binding("CatchTotalWt") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight of sample", Binding = new Binding("CatchSampleWt") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Number of boxes", Binding = new Binding("BoxesTotal") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Number of boxes sampled", Binding = new Binding("BoxesSampled") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Raising factor", Binding = new Binding("RaisingFactor") });


                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Vessel tracking", Binding = new Binding("IncludeTracking") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("TimeDepartLandingSite"),
                        Header = "Departure from landing site"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("TimeArriveLandingSite"),
                        Header = "Arrival at landing site"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "GPS", Binding = new Binding("GPS.AssignedName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Remarks", Binding = new Binding("Remarks") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    break;
                case "grid":
                    dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetGridBingoCoordinates();

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "UTM zone", Binding = new Binding("Parent.UTMZone") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Bingo coordinate", Binding = new Binding("CompleteGridName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Coordinates", Binding = new Binding("Grid25Cell.Coordinate") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "UTM Coordinates", Binding = new Binding("Grid25Cell.UTMCoordinate") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;
                case "soakTime":
                    dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetGearSoakTimes();

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SetTime"),
                        Header = "Date and time of gear set"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("HaulTime"),
                        Header = "Date and time of gear haul"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Waypoint at set", Binding = new Binding("WaypointAtSet") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Waypoint at haul", Binding = new Binding("WaypointAtHaul") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });

                    break;
                case "effortSpecs":
                case "duplicatedEffort":
                    if (result == "effortSpecs")
                    {
                        dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetGearEfforts();
                    }
                    else
                    {
                        dataGridExcel.ItemsSource = VesselUnloadServerRepository.DuplicatedEffortSpec;
                    }

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Effort specification", Binding = new Binding("EffortSpecName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Value", Binding = new Binding("SelectedEffortMeasure") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });

                    break;
                case "catchComposition":
                case "duplicatedCatchComp":
                    if (result == "catchComposition")
                    {
                        dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetCatchCompositions();
                    }
                    else
                    {
                        dataGridExcel.ItemsSource = VesselUnloadServerRepository.DuplicatedCatchComposition;
                    }

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Taxa.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("SpeciesNameSelected") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("SpeciesWt") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sample weight", Binding = new Binding("SpeciesSampleWt") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;
                case "lengths":
                    dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetLengthList();

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;

                case "lengthWeight":
                    dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetLenWtList();

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;
                case "lengthFreq":
                case "duplicatedLenFreq":
                    if (result == "lengthFreq")
                    {
                        dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetLenFreqList();
                    }
                    else
                    {
                        dataGridExcel.ItemsSource = VesselUnloadServerRepository.DuplicatedLenFreq;
                    }

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length class", Binding = new Binding("LengthClass") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Frequency", Binding = new Binding("Frequency") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;
                case "gms":
                    dataGridExcel.ItemsSource = VesselUnloadServerRepository.GetGMSList();

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sex", Binding = new Binding("Sex") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Gonad maturity", Binding = new Binding("GMS") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Stomach content weight", Binding = new Binding("StomachContentWt") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Stomach content category", Binding = new Binding("GutContentCategory") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;
            }
        }
        private void ShowResultFromExcel(string result)
        {
            DataGridTextColumn col;
            dataGridExcel.ItemsSource = null;
            dataGridExcel.Columns.Clear();
            switch (result)
            {
                case "effort":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelMainSheets;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "RowUUID", Binding = new Binding("RowUUID"), Visibility = Visibility.Hidden });

                    //dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Date and time submitted", Binding = new Binding("DateTimeSubmitted") });
                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeSubmitted"),
                        Header = "Date and time submitted"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("IsSaved") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Device ID", Binding = new Binding("DeviceId") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Form version", Binding = new Binding("FormVersion") });

                    //dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sampling date", Binding = new Binding("SamplingDate") });
                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SamplingDate"),
                        Header = "Sampling date"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("EnumeratorName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("GearName") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Fishing boat is used", Binding = new Binding("IsBoatUsed") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Sector") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Successful trip", Binding = new Binding("TripIsSuccess") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight of catch", Binding = new Binding("CatchWeightTotal") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight of sample", Binding = new Binding("CatchWeightSampled") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Number of boxes", Binding = new Binding("BoxesTotal") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Number of boxes sampled", Binding = new Binding("BoxesSampled") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Raising factor", Binding = new Binding("RaisingFactor")});
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Vessel tracking", Binding = new Binding("TripIsTracked") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeDepartLandingSite"),
                        Header = "Departure from landing site"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeArriveLandingSite"),
                        Header = "Arrival at landing site"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "GPS", Binding = new Binding("GPS.AssignedName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Remarks", Binding = new Binding("Remarks") });

                    break;
                case "grid":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelBingoGroups;

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "UTM zone", Binding = new Binding("Parent.UTMZone") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Bingo coordinate", Binding = new Binding("BingoCoordinate") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Coordinates", Binding = new Binding("Grid25Grid.Coordinate") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "UTM Coordinates", Binding = new Binding("Grid25Grid.UTMCoordinate") });


                    break;
                case "soakTime":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelSoakTimes;

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeSet"),
                        Header = "Date and time of gear set"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeHaul"),
                        Header = "Date and time of gear haul"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Waypoint at set", Binding = new Binding("GPSWaypointAtSet") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Waypoint at haul", Binding = new Binding("GPSWaypointAtHaul") });

                    break;
                case "effortSpecs":
                case "duplicatedEffort":
                    if (result == "effortSpecs")
                    {
                        dataGridExcel.ItemsSource = ImportExcel.ExcelEffortRepeats;
                    }
                    else
                    {

                    }

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Effort specification", Binding = new Binding("EffortSpecification") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Value", Binding = new Binding("EfforValueText") });

                    break;
                case "catchComposition":
                case "duplicatedCatchComp":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelCatchCompositions;

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("SpeciesWeight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sample weight", Binding = new Binding("SpeciesSampleWeight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Notes", Binding = new Binding("Notes") });
                    break;
                case "lengths":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelLengthLists;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    break;
                case "lengthWeight":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelLengthWeights;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight") });
                    break;
                case "lengthFreq":
                case "duplicatedLenFreq":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelLenFreqs;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length class", Binding = new Binding("LengthClass") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Frequency", Binding = new Binding("Frequency") });
                    break;
                case "gms":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelGMSes;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sex", Binding = new Binding("Sex") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Gonad maturity", Binding = new Binding("GonadMaturity") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Stomach content weight", Binding = new Binding("StomachContentWeight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Stomach content category", Binding = new Binding("GutContentClassification") });
                    break;
            }
        }
        private void OnMenuItemChecked(object sender, RoutedEventArgs e)
        {
            var menuTag = ((MenuItem)sender).Tag.ToString();
            menuUpload.IsEnabled = menuTag == "effort" || menuTag=="landingSiteSampling";
            if (_isJSONData)
            {
                ShowResultFromAPI(menuTag);
            }
            else
            {
                ShowResultFromExcel(menuTag);
            }
            labelDuplicated.Content = string.Empty;
            switch (menuTag)
            {
                case "effortSpecs":
                    
                    if(VesselUnloadServerRepository.DuplicatedEffortSpec.Count > 0)
                    {
                        labelDuplicated.Content = "Effort specs are duplicated";
                    }
                    break;
                case "catchComposition":
                    
                    if (VesselUnloadServerRepository.DuplicatedCatchComposition.Count > 0)
                    {
                        labelDuplicated.Content = "Catch composition items are duplicated";
                    }
                    break;
                case "lengthFreq":
                    
                    if (VesselUnloadServerRepository.DuplicatedCatchComposition.Count > 0)
                    {
                        labelDuplicated.Content = "Length classes are duplicated";
                    }
                    break;
            }



            foreach (var mi in menuView.Items)
            {
                if (mi.GetType().Name != "Separator")
                {
                    var menu = (MenuItem)mi;
                    if (menu.Name != ((MenuItem)e.Source).Name)
                    {
                        menu.IsChecked = false;
                    }
                }
            }
        }

        private void OnDataGridSelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void OnWindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            this.SavePlacement();
            ImportExcel.UploadSubmissionToDB -= OnUploadSubmissionToDB;
            VesselUnloadServerRepository.UploadSubmissionToDB -= OnUploadSubmissionToDB;
            //KoboAPI.UploadSubmissionToDB -= OnUploadSubmissionToDB;
        }

        private void OnDataGridLoadingRow(object sender, DataGridRowEventArgs e)
        {
            e.Row.Header= (e.Row.GetIndex()+1).ToString();
        }

        private void OnMenuClicked(object sender, RoutedEventArgs e)
        {

        }
    }
}
