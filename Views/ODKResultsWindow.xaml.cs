using Microsoft.Win32;
using NSAP_ODK.Entities;
using NSAP_ODK.Entities.Database;
using NSAP_ODK.Entities.Database.FromJson;
using NSAP_ODK.Utilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Threading;
using Ookii.Dialogs.Wpf;
using System.Linq;
using System.Xml.Serialization;
using System.Threading;

namespace NSAP_ODK.Views
{
    public enum ODKServerDownload
    {
        ServerDownloadVesselUnload,
        ServerDownloadLandings
    }

    /// <summary>
    /// Interaction logic for ODKResultsWindow.xaml
    /// </summary>
    public partial class ODKResultsWindow : Window
    {
        private DispatcherTimer _timer;
        private TreeViewItem _jsonDateDownloadnode;
        private static ODKResultsWindow _instance;
        private List<VesselLanding> _mainSheets;
        private List<LandingSiteBoatLandingFromServer> _mainSheetsLanding;
        private string _excelDownloaded;
        private bool _isJSONData;
        private int _savedCount;
        private ODKServerDownload _odkServerDownload;
        private bool _uploadToDBSuccess;
        private JSONFile _jsonFile;
        private DateTime? _jsonFileUseCreationDateForHistory;
        private List<FileInfo> _jsonfiles;
        private int _countJSONFiles;
        DataGrid _targetGrid;
        private int _updateXFormIDCount;
        private TreeViewItem _firstJSONFileNode;
        private int? _jsonFileForUploadCount = null;
        private string _historyJSONFileForUploading = "";
        private List<UnrecognizedFishingGround> _unrecognizedFishingGrounds = new List<UnrecognizedFishingGround>();
        private bool _unrecognizedFGAlredyViewed = false;
        private DateTime? _unrecognizedFGDateCreated;
        private int _ufg_count = 0;
        private List<VesselLanding> _resolvedFishingGroundLandings = new List<VesselLanding>();
        private List<VesselLanding> _formsWithMissingLandingSiteInfo = new List<VesselLanding>();
        public string JSON { get; set; }
        public string FormID { get; set; }
        private bool _openLogInWindow;

        private void OnTimerTick(object sender, EventArgs e)
        {
            _timer.Stop();
            if (_openLogInWindow)
            {
                _openLogInWindow = false;
                OpenServerWindow(refreshDBSummary: true);
            }
        }
        public void OpenLogInWindow(bool isOpen = false)
        {
            _openLogInWindow = isOpen;
            //if (_openLogInWindow = isOpen)
            //{
            //    OpenServerWindow(refreshDBSummary: true);
            //}
        }
        public string Version { get; set; }

        public string Description { get; set; }

        public int Count { get; set; }

        public ODKServerDownload ODKServerDownload
        {
            get { return _odkServerDownload; }
            set
            {
                _odkServerDownload = value;
                //menuView.Visibility = Visibility.Visible;
            }
        }

        public MainWindow ParentWindow { get; set; }

        public static ODKResultsWindow GetInstance()
        {
            if (_instance == null)
            {
                _instance = new ODKResultsWindow();
            }
            return _instance;
        }

        public ODKResultsWindow()
        {
            InitializeComponent();
            Loaded += OnWindowLoaded;
            Closed += OnWindowClosed;
        }


        protected override void OnSourceInitialized(EventArgs e)
        {
            base.OnSourceInitialized(e);
            this.ApplyPlacement();
        }

        private void OnWindowClosed(object sender, EventArgs e)
        {
            if (_timer != null)
            {
                _timer.Tick -= OnTimerTick;
            }
            _instance = null;
            if (_uploadToDBSuccess || _savedCount > 0)
            {
                ((MainWindow)Owner).RefreshSummary();
            }
            ((MainWindow)Owner).Focus();
        }

        private string GetJsonTextFileFromFileOpenDialog()
        {
            OpenFileDialog opf = new OpenFileDialog();
            opf.Title = "Open json file generated by ODK Collect";
            opf.Filter = "Json (*.json)|*.json|Text (*.txt)|*.txt";
            opf.FilterIndex = 1;
            if ((bool)opf.ShowDialog(this))
            {
                return opf.FileName;
            }
            else
            {
                return "";
            }
        }

        private void GetExcelFromFileOpen()
        {
            OpenFileDialog opf = new OpenFileDialog();
            opf.Title = "Open Excel file generated by ODK Collect";
            opf.Filter = "Excel (*.xlsx)|*.xlsx|Excel (*.xls)|*.xls";
            opf.FilterIndex = 1;
            if ((bool)opf.ShowDialog(this))
            {
                _isJSONData = false;
                ImportExcel.ExcelFileName = opf.FileName;
                if (ImportExcel.ExcelMainSheets.Count > 0)
                {
                    //we uncheck and check to force menu check to proceed
                    menuViewEffort.IsChecked = false;
                    menuViewEffort.IsChecked = true;
                }
                else
                {
                    dataGridExcel.ItemsSource = null;
                    dataGridExcel.Items.Clear();
                    MessageBox.Show("Imported excel file does not contain ODK data\r\n" +
                                     "or uses a different format for saving ODK data",
                                     "Excel file import error",
                                     MessageBoxButton.OK,
                                     MessageBoxImage.Information); ;
                }
            }
        }

        private void OnWindowLoaded(object sender, RoutedEventArgs e)
        {


            Title = "Manage NSAP-ODK data";
            labelProgress.Content = "";
            ImportExcel.UploadSubmissionToDB += OnUploadSubmissionToDB;
            VesselUnloadServerRepository.UploadSubmissionToDB += OnUploadSubmissionToDB;
            VesselUnloadServerRepository.ClearUnrecgnizedFishingGroundsList();
            labelDuplicated.Content = string.Empty;

            if (Debugger.IsAttached)
            {
                menuClearTables.Visibility = Visibility.Visible;
                menuVesselCountJSON.Visibility = Visibility.Visible;
                menuVesselUnloadJSON.Visibility = Visibility.Visible;
                menuDeletePastDate.Visibility = Visibility.Visible;
            }

            menuImportSQLDump.Visibility = Visibility.Visible;
            if (Global.Settings.UsemySQL)
            {
                menuImportSQLDump.Visibility = Visibility.Collapsed;
            }

            menuSaveJson.IsEnabled = true;
            menuView.Visibility = Visibility.Collapsed;

            ResetView();
            rowGrid.Height = new GridLength(1, GridUnitType.Star);

            if (NSAPEntities.KoboServerViewModel.Count() == 0)
            {
                menuReUploadJsonHistory.Visibility = Visibility.Collapsed;
            }

            if (_openLogInWindow)
            {
                _timer = new DispatcherTimer();
                _timer.Tick += OnTimerTick;
                _timer.Interval = TimeSpan.FromSeconds(1);
                _timer.Start();
            }
            CreateTablesInAccess.AccessTableEvent += CreateTablesInAccess_AccessTableEvent;
        }

        private void CreateTablesInAccess_AccessTableEvent(object sender, CreateTablesInAccessEventArgs e)
        {
            switch (e.Intent)
            {
                case "start importing csv":
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              progressBar.Value = 0;
                              progressBar.Maximum = e.TotalTableCount;
                              //do what you need to do on UI Thread
                              return null;
                          }), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              labelProgress.Content = "Starting to save JSON data";

                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);
                    break;
                case "done imported csv":
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              progressBar.Value=e.CurrentTableCount;
                              //do what you need to do on UI Thread
                              return null;
                          }), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              labelProgress.Content = $"Finished saving JSON to {e.CurrentTableName} (Table {e.CurrentTableCount} of {progressBar.Maximum})";

                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);
                    break;
            }
        }

        private void SetMenuViewVisibility()
        {
            menuView.Visibility = Visibility.Visible;
            foreach (var item in menuView.Items)
            {
                if (item.GetType().Name == "MenuItem")
                {
                    var menu = (MenuItem)item;
                    menu.Visibility = Visibility.Collapsed;
                    switch (_odkServerDownload)
                    {
                        case ODKServerDownload.ServerDownloadVesselUnload:
                            if (!menu.Name.Contains("menuViewLandingSite"))
                            {
                                menu.Visibility = Visibility.Visible;
                            }
                            break;

                        case ODKServerDownload.ServerDownloadLandings:
                            if (menu.Name.Contains("menuViewLandingSite"))
                            {
                                menu.Visibility = Visibility.Visible;
                            }
                            break;
                    }
                }
            }
        }

        public List<LandingSiteBoatLandingFromServer> MainSheetsLanding
        {
            get { return _mainSheetsLanding; }
            set
            {
                menuSaveToExcel.Visibility = Visibility.Visible;
                _mainSheetsLanding = value;
                _isJSONData = true;

                if (menuViewLandingSiteSampling.IsChecked)
                {
                    ShowResultFromAPI("landingSiteSampling");
                }
                else
                {
                    menuViewLandingSiteSampling.IsChecked = true;
                }
                SetMenuViewVisibility();
            }
        }


        private void SetMenus()
        {
            menuSaveToExcel.Visibility = Visibility.Visible;
            _isJSONData = true;

            menuDuplicatedEffortSpecs.IsEnabled = VesselUnloadServerRepository.DuplicatedEffortSpec.Count > 0;
            menuDuplicatedCatchComp.IsEnabled = VesselUnloadServerRepository.DuplicatedCatchComposition.Count > 0;
            menuDuplicatedLF.IsEnabled = VesselUnloadServerRepository.DuplicatedLenFreq.Count > 0;

            if (menuViewEffort.IsChecked)
            {
                ShowResultFromAPI("effort");
                //if (_jsonfiles != null && _jsonfiles.Count > 0)
                //{
                //    ShowResultFromAPI("effort", gridJSONContent);
                //}
                //else
                //{
                //    ShowResultFromAPI("effort", dataGridExcel);
                //}
            }
            else
            {
                menuViewEffort.IsChecked = true;
            }
            SetMenuViewVisibility();
        }
        public List<VesselLanding> MainSheets
        {
            get { return _mainSheets; }
            set
            {

                _mainSheets = value;
                SetMenus();

            }
        }

        public string ExcelFileDownloaded
        {
            get { return _excelDownloaded; }
            set
            {
                menuSaveToExcel.Visibility = Visibility.Collapsed;
                _isJSONData = false;
                _excelDownloaded = value;
                ImportExcel.ExcelFileName = _excelDownloaded;
                if (menuViewEffort.IsChecked)
                {
                    //ShowResultFromAPI("effort");
                    ShowResultFromExcel("effort");
                }
                else
                {
                    menuViewEffort.IsChecked = true;
                }
            }
        }

        public Task<bool> SaveJSONTextTask(bool verbose = true)
        {
            return Task.Run(() => SaveJSONText(verbose));
        }

        private async Task<bool> SaveJSONText(bool verbose = true)
        {
            bool success = false;

            _jsonFile = new JSONFile();
            _jsonFile.JSONText = JSON;
            _jsonFile.MD5 = MD5.CreateMD5(_jsonFile.JSONText);
            _jsonFile.RowID = NSAPEntities.JSONFileViewModel.NextRecordNumber;
            _jsonFile.FormID = FormID;
            _jsonFile.Description = Description;
            _jsonFile.Earliest = VesselUnloadServerRepository.DownloadedLandingsEarliestLandingDate();
            _jsonFile.Latest = VesselUnloadServerRepository.DownloadedLandingsLatestLandingDate();
            _jsonFile.Count = VesselUnloadServerRepository.DownloadedLandingsCount();
            _jsonFile.DateAdded = DateTime.Now;
            _jsonFile.FileName = $@"{Global.Settings.JSONFolder}\{NSAPEntities.JSONFileViewModel.CreateFileName(_jsonFile)}";

            if (NSAPEntities.JSONFileViewModel.Count() == 0 || NSAPEntities.JSONFileViewModel.getJSONFIle(_jsonFile.MD5) == null)
            {
                success = await NSAPEntities.JSONFileViewModel.Save(_jsonFile);
                if (success)
                {
                    NSAPEntities.KoboServerViewModel.ResetJSONFields(resetLastUploaded: false);
                    var ks = NSAPEntities.KoboServerViewModel.GetKoboServer(int.Parse(_jsonFile.FormID));
                    ks.LastCreatedJSON = new FileInfo(_jsonFile.FileName).Name;
                    NSAPEntities.KoboServerViewModel.ServerWithCreatedJSON = ks;

                    if (verbose)
                    {
                        MessageBox.Show("JSON file saved successfully", "NSAP-ODK Database", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
            }
            else
            {
                if (verbose)
                {
                    MessageBox.Show("JSON file already saved in database", "NSAP-ODK Database", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            return success;
        }

        private void ResetView()
        {
            rowJsonFiles.Height = new GridLength(0);
            rowGrid.Height = new GridLength(0);
            labelJSONFile.Content = "";
            _targetGrid = dataGridExcel;
            //rowGrid.Height = new GridLength(1, GridUnitType.Star);
        }


        private void AddFilesToDateNode(TreeViewItem dateNode, DownloadedJsonMetadata djmd, string dateDownloaded)
        {
            int counter = 0;
            foreach (FileInfo f in _jsonfiles.OrderBy(t => t.Name))
            {
                if (f.Extension == ".json" && f.Name.Contains(djmd.FileName.Replace("_info.xml", "")))
                {

                    TreeViewItem fileNode = new TreeViewItem
                    {
                        Header = $"{dateDownloaded} {++counter}",
                        Tag = new FileInfoJSONMetadata { JSONFile = f, DownloadedJsonMetadata = djmd, ItemNumber = counter },

                    };

                    dateNode.Items.Add(fileNode);
                    _countJSONFiles++;
                }
            }

        }
        public bool StartAtBeginningOfJSONDownloadList { get; set; }
        public UpdateJSONHistoryMode UpdateJSONHistoryMode { get; set; }
        private HashSet<string> _rootChildrenHeadersHashSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        private void AddMetadataToTreeView(DownloadedJsonMetadata djmd, TreeViewItem root)
        {


            string dateDownloaded = djmd.DateDownloaded.ToString("MMM-dd-yyyy HH:mm");
            TreeViewItem formNameNode = new TreeViewItem { Header = djmd.FormName };
            TreeViewItem formOwnerNode = new TreeViewItem { Header = djmd.DBOwner };
            TreeViewItem dateDownloadNode = new TreeViewItem { Header = dateDownloaded, Tag = "date_download" };

            //formNameNode.Tag = djmd;
            //formOwnerNode.Tag = djmd;
            dateDownloadNode.Tag = djmd;

            if (root.Items.Count == 0)
            {
                _rootChildrenHeadersHashSet.Add(formNameNode.Header.ToString());
                root.Items.Add(formNameNode);
                formNameNode.Items.Add(formOwnerNode);
                formOwnerNode.Items.Add(dateDownloadNode);
                AddFilesToDateNode(dateDownloadNode, djmd, dateDownloaded);
                formNameNode.ExpandSubtree();
                _firstJSONFileNode = dateDownloadNode.Items[0] as TreeViewItem;
            }
            else if (_rootChildrenHeadersHashSet.Add(formNameNode.Header.ToString()))
            {
                root.Items.Add(formNameNode);
                formNameNode.Items.Add(formOwnerNode);
                formOwnerNode.Items.Add(dateDownloadNode);
                AddFilesToDateNode(dateDownloadNode, djmd, dateDownloaded);
            }
            else
            {

                bool found = true;
                foreach (TreeViewItem tvi in root.Items)
                {
                    if (tvi.Header.ToString() == djmd.FormName)
                    {
                        found = true;
                        formNameNode = tvi;
                    }
                    if (!found)
                    {
                        root.Items.Add(formNameNode);
                    }
                }

                found = false;
                foreach (TreeViewItem tvi1 in formNameNode.Items)
                {
                    if (tvi1.Header.ToString() == djmd.DBOwner)
                    {
                        formOwnerNode = tvi1;
                        found = true;
                    }
                }
                if (!found)
                {
                    formNameNode.Items.Add(formOwnerNode);
                }

                found = false;
                foreach (TreeViewItem tvi2 in formOwnerNode.Items)
                {
                    if (tvi2.Header.ToString() == dateDownloaded)
                    {
                        found = true;
                        dateDownloadNode = tvi2;
                    }
                }
                if (!found)
                {
                    dateDownloadNode.Tag = djmd;
                    formOwnerNode.Items.Add(dateDownloadNode);
                    AddFilesToDateNode(dateDownloadNode, djmd, dateDownloaded);

                }


            }
        }

        private async Task ProcessHistoryJsonNode(TreeViewItem historyJSONNode)
        {
            var jm = (FileInfoJSONMetadata)historyJSONNode.Tag;
            _jsonFileUseCreationDateForHistory = jm.JSONFile.CreationTime;
            historyJSONNode.IsSelected = true;
            await Upload(verbose:!VesselUnloadServerRepository.DelayedSave);
            NSAPEntities.KoboServerViewModel.ResetJSONFields();
            jm.Koboserver.LastUploadedJSON = jm.JSONFile.Name;
            NSAPEntities.KoboServerViewModel.ServerWithUploadedJSON = jm.Koboserver;
        }


        private async Task ProcessJSONHistoryNodes(TreeViewItem root)
        {
            bool firstLoopDone = false;
            bool lastJSONUploadFound = false;
            string lastUploadedJSON = NSAPEntities.KoboServerViewModel.GetLastUploadedJSON();
            NSAPEntities.ClearCSVData();
            foreach (TreeViewItem jsonNode in root.Items)
            {
                if (!VesselUnloadServerRepository.CancelUpload)
                {
                    var jm = (FileInfoJSONMetadata)jsonNode.Tag;
                    if (string.IsNullOrEmpty(lastUploadedJSON) || UpdateJSONHistoryMode == UpdateJSONHistoryMode.UpdateReplaceExistingData || StartAtBeginningOfJSONDownloadList)
                    {
                        if (!firstLoopDone)
                        {
                            VesselUnloadServerRepository.ResetGroupIDs();
                            firstLoopDone = true;
                        }
                        await ProcessHistoryJsonNode(jsonNode);
                    }
                    else
                    {
                        if (jm.JSONFile.Name == lastUploadedJSON || lastJSONUploadFound)
                        {
                            await ProcessHistoryJsonNode(jsonNode);
                            lastJSONUploadFound = true;
                        }
                    }
                }
                else
                {
                    VesselUnloadServerRepository.CancelUpload = false;
                    break;
                }
            }
        }

        private async Task<bool> ProcessResolvedLandings(List<VesselLanding> resolvedLandings)
        {
            return await VesselUnloadServerRepository.UploadToDBResolvedLandingsAsync(resolvedLandings);
        }

        private async Task ProcessLandingsWithMissingLandingSites()
        {
            VesselUnloadServerRepository.LandingWithUpdatedLandingSite += VesselUnloadServerRepository_LandingWithUpdatedLandingSite;
            await VesselUnloadServerRepository.UpdateMissingLandingSitesAsync();
            VesselUnloadServerRepository.LandingWithUpdatedLandingSite -= VesselUnloadServerRepository_LandingWithUpdatedLandingSite;
        }

        private void VesselUnloadServerRepository_LandingWithUpdatedLandingSite(int obj)
        {
            //
        }

        private async Task ProcessJSONSNodes(bool updateXFormID = false, bool locateUnsavedFromServerDownload = false, bool updateLandingSites = false, bool locateMissingLSInfo = false)
        {
            bool firstLoopDone = false;
            _jsonDateDownloadnode.IsExpanded = true;
            VesselUnloadServerRepository.CancelUpload = false;
            NSAPEntities.ClearCSVData();
            foreach (TreeViewItem tvi in _jsonDateDownloadnode.Items)
            {
                tvi.IsSelected = true;
                //ProcessJsonFileForDisplay((FileInfoJSONMetadata)tvi.Tag);
                if (!VesselUnloadServerRepository.CancelUpload)
                {
                    if (updateXFormID)
                    {
                        await ProcessXFormIDs();
                    }
                    else if (locateUnsavedFromServerDownload)
                    {
                        await ProcessXFormIDs(locateUnsavedFromServer: true);
                    }
                    if (updateLandingSites)
                    {
                        await ProcessLandingsWithMissingLandingSites();
                    }
                    if (locateMissingLSInfo)
                    {
                        _formsWithMissingLandingSiteInfo.AddRange(await VesselUnloadServerRepository.GetFormWithMissingLandingSiteInfoAsync());
                    }
                    else
                    {
                        if (!firstLoopDone && NSAPEntities.SummaryItemViewModel.Count==0)
                        {
                            VesselUnloadServerRepository.ResetGroupIDs();
                            firstLoopDone = true;
                        }
                        await Upload(verbose: !VesselUnloadServerRepository.DelayedSave);
                    }
                }
                else
                {
                    break;
                }
            }
            VesselUnloadServerRepository.UpdateInProgress = false;
            VesselUnloadServerRepository.UploadInProgress = false;
        }

        private string GetJSONFolder(bool savedHistory = true)
        {
            string description = "Locate folder containing saved JSON history files";
            if (!savedHistory)
            {
                description = "Locate folder containing downloaded JSON files";
            }
            VistaFolderBrowserDialog vfbd = new VistaFolderBrowserDialog();
            vfbd.Description = description;
            vfbd.UseDescriptionForTitle = true;
            vfbd.ShowNewFolderButton = true;
            vfbd.SelectedPath = AppDomain.CurrentDomain.BaseDirectory;
            if ((bool)vfbd.ShowDialog() && vfbd.SelectedPath.Length > 0)
            {
                return vfbd.SelectedPath;
            }
            return "";
        }
        public bool OpenImportedDatabaseInApplication { get; set; }
        public string ImportIntoMDBFile { get; set; }
        public SelectImportActionOption ImportActionOption { get; set; }


        private async void OnMenuClick(object sender, RoutedEventArgs e)
        {
            string jsonFolder = "";
            string menuName = ((MenuItem)sender).Name;
            switch (menuName)
            {
                case "menuLocateMissingLSInfo":
                    _formsWithMissingLandingSiteInfo.Clear();
                    await ProcessJSONSNodes(locateMissingLSInfo: true);
                    break;
                case "menuLocateUnsaved":
                    await ProcessJSONSNodes(locateUnsavedFromServerDownload: true);
                    break;
                case "menuImportSQLDump":
                    SelectImportActionWindow siaw = new SelectImportActionWindow();
                    siaw.Owner = this;
                    if ((bool)siaw.ShowDialog())
                    {
                        ImportSQLDumpWindow isqlw = new ImportSQLDumpWindow();
                        isqlw.ImportActionOption = ImportActionOption;
                        isqlw.ImportIntoMDBFile = ImportIntoMDBFile;

                        isqlw.Owner = this;
                        if ((bool)isqlw.ShowDialog())
                        {
                            if (OpenImportedDatabaseInApplication)
                            {
                                ((MainWindow)Owner).OpenImportedDatabaseInApplication = true;
                                ((MainWindow)Owner).ImportIntoMDBFile = ImportIntoMDBFile;

                            }
                        }
                    }
                    break;

                //opens a form that shows a table of sampled fish landings with fishing grounds not yet entered into the database
                case "menuUnrecognizedFG":
                    if (_unrecognizedFishingGrounds.Count > 0)
                    {
                        ViewUnrecognizedFishingGrounds();
                    }
                    break;

                //uploads all the json history files in the treeview.
                case "menuUploadAllJsonHistoryFiles":
                    UploadJSONHistoryOptionsWindow ujhw = new UploadJSONHistoryOptionsWindow();
                    ujhw.Owner = this;
                    ujhw.JSONFilesToUploadType = JSONFilesToUploadType.UploadTypeJSONHistoryFiles;
                    if ((bool)ujhw.ShowDialog())
                    {
                        VesselUnloadServerRepository.DelayedSave = !Global.Settings.UsemySQL;
                        VesselUnloadServerRepository.ResetTotalUploadCounter();
                        VesselUnloadServerRepository.CancelUpload = false;

                        //if we need to replace existing data and then update all
                        if (UpdateJSONHistoryMode == UpdateJSONHistoryMode.UpdateReplaceExistingData)
                        {
                            ClearTables(verboseMode: false);
                        }


                        //call function which uploads all the json files that are listed in the treeview
                        try
                        {
                            await ProcessJSONHistoryNodes((TreeViewItem)treeViewJSONNavigator.SelectedItem);
                            if (VesselUnloadServerRepository.DelayedSave && VesselUnloadServerRepository.TotalUploadCount > 0)
                            {
                                if (await CreateTablesInAccess.UploadImportJsonResultAsync())
                                {
                                    MessageBox.Show("Finished uploading JSON history files to the database", "NSAP-ODK Database", MessageBoxButton.OK, MessageBoxImage.Information);
                                    Close();
                                }

                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.Log(ex);
                        }
                    }
                    break;

                //locate folder of JSON history files and lists them in a treeview
                case "menuReUploadJsonHistory":
                    ClearJSONTreeRootNodes();
                    int counter = 0;
                    jsonFolder = GetJSONFolder(savedHistory: true);
                    if (jsonFolder.Length > 0)
                    {
                        _jsonfiles = Directory.GetFiles(jsonFolder).Select(s => new FileInfo(s)).ToList();
                        if (_jsonfiles.Any())
                        {
                            TreeViewItem root = new TreeViewItem { Header = "Upload history JSON files" };
                            treeViewJSONNavigator.Items.Add(root);
                            foreach (var f in _jsonfiles.OrderBy(t => t.CreationTime))
                            {
                                if (f.Extension == ".json")
                                {
                                    var parts = f.Name.Split(new char[] { ' ' });
                                    if (int.TryParse(parts[0], out int v) &&
                                        DateTime.TryParse(parts[1], out DateTime d1) &&
                                        DateTime.TryParse(parts[1], out DateTime d3))
                                    {
                                        var ks = NSAPEntities.KoboServerViewModel.GetKoboServer(int.Parse(parts[0]));
                                        if (ks != null && ks.IsFishLandingSurveyForm)
                                        {
                                            counter++;
                                            FileInfoJSONMetadata fm = new FileInfoJSONMetadata
                                            {
                                                JSONFile = new FileInfo(f.FullName),
                                                ItemNumber = counter,
                                                Koboserver = ks
                                            };
                                            //TreeViewItem fileNode = new TreeViewItem { Header = f.Name, Tag = f.FullName };
                                            TreeViewItem fileNode = new TreeViewItem { Header = f.Name, Tag = fm };
                                            root.Items.Add(fileNode);
                                        }
                                    }
                                }
                            }
                            root.IsExpanded = true;
                        }
                    }
                    ResetView();
                    if (counter > 0)
                    {
                        _targetGrid = gridJSONContent;
                        //ProcessJsonFileForDisplay((FileInfoJSONMetadata)_firstJSONFileNode.Tag);
                        //treeViewJSONNavigator.Focus();
                        _jsonFileForUploadCount = counter;
                    }
                    else
                    {
                        treeViewJSONNavigator.DataContext = null;
                        treeViewJSONNavigator.Items.Clear();
                        MessageBox.Show("No JSON files from Kobotoolbox server was found", "NSAP-ODK Database");
                    }
                    rowJsonFiles.Height = new GridLength(1, GridUnitType.Star);


                    break;

                //when downloaded JSON of type download_all is selected
                case "menuReuploadAll":
                    ujhw = new UploadJSONHistoryOptionsWindow();
                    ujhw.JSONFilesToUploadType = JSONFilesToUploadType.UploadTypeDownloadedJsonDownloadAll;
                    ujhw.Owner = this;
                    if ((bool)ujhw.ShowDialog())
                    {
                        if (!Global.Settings.UsemySQL)
                        {
                            //NSAPEntities.ClearCSVData();
                            VesselUnloadServerRepository.ResetTotalUploadCounter();
                            VesselUnloadServerRepository.DelayedSave = true;
                        }
                        _jsonFileUseCreationDateForHistory = null;
                        if (UpdateJSONHistoryMode == UpdateJSONHistoryMode.UpdateReplaceExistingData)
                        {
                            ClearTables(verboseMode: false);
                        }
                        await ProcessJSONSNodes();

                        if (VesselUnloadServerRepository.DelayedSave && VesselUnloadServerRepository.TotalUploadCount > 0)
                        {
                            if (await CreateTablesInAccess.UploadImportJsonResultAsync())
                            {
                                var r = MessageBox.Show("Finished uploading JSON history files to the database\r\n\r\nWill you upload additional JSON files?", "NSAP-ODK Database", MessageBoxButton.YesNo, MessageBoxImage.Information);
                                if (r == MessageBoxResult.No)
                                {
                                    Close();
                                }
                            }

                        }
                    }

                    break;
                case "menuUpdateLandingSites":
                    ujhw = new UploadJSONHistoryOptionsWindow();
                    ujhw.JSONFilesToUploadType = JSONFilesToUploadType.UploadTypeJSONHistoryUpdateLandingSites;
                    ujhw.Owner = this;
                    if ((bool)ujhw.ShowDialog())
                    {
                        await ProcessJSONSNodes(updateLandingSites: true);
                    }
                    break;
                case "menuUpdateXformIdentifier":
                    ujhw = new UploadJSONHistoryOptionsWindow();
                    ujhw.JSONFilesToUploadType = JSONFilesToUploadType.UploadTypeJSONHistoryUpdateXFormID;
                    ujhw.Owner = this;
                    if ((bool)ujhw.ShowDialog())
                    {
                        await ProcessJSONSNodes(updateXFormID: true);
                    }


                    break;

                case "menuUploadAllJsonFiles":
                    ujhw = new UploadJSONHistoryOptionsWindow();
                    ujhw.JSONFilesToUploadType = JSONFilesToUploadType.UploadTypeDownloadedJsonNotDownloaded;
                    ujhw.Owner = this;
                    if ((bool)ujhw.ShowDialog())
                    {
                        await ProcessJSONSNodes();
                    }
                    break;
                case "menuUploadJson":
                    ClearJSONTreeRootNodes();
                    _rootChildrenHeadersHashSet.Clear();
                    jsonFolder = GetJSONFolder(savedHistory: false);
                    if (jsonFolder.Length > 0)
                    {
                        _jsonfiles = Directory.GetFiles(jsonFolder).Select(s => new FileInfo(s)).ToList();
                        if (_jsonfiles.Any())
                        {

                            TreeViewItem root = new TreeViewItem { Header = "Downloaded e-form data" };
                            treeViewJSONNavigator.Items.Add(root);
                            counter = 0;
                            foreach (var f in _jsonfiles.OrderByDescending(t => t.CreationTime))
                            {
                                if (f.Extension == ".xml")
                                {
                                    using (FileStream fs = new FileStream(f.FullName, FileMode.Open)) //double check that...
                                    {
                                        XmlSerializer _xSer = new XmlSerializer(typeof(DownloadedJsonMetadata));

                                        try
                                        {
                                            DownloadedJsonMetadata djmd = (DownloadedJsonMetadata)_xSer.Deserialize(fs);
                                            djmd.FileName = f.Name;

                                            AddMetadataToTreeView(djmd, root);
                                            counter++;
                                        }
                                        catch (Exception ex)
                                        {
                                            Logger.Log(ex);
                                        }
                                    }

                                }
                            }
                        }
                    }
                    ResetView();
                    if (_countJSONFiles > 0)
                    {
                        _targetGrid = gridJSONContent;
                        //ProcessJsonFileForDisplay((FileInfoJSONMetadata)_firstJSONFileNode.Tag);
                        //treeViewJSONNavigator.Focus();
                    }
                    else
                    {
                        treeViewJSONNavigator.DataContext = null;
                        treeViewJSONNavigator.Items.Clear();
                        MessageBox.Show("No JSON files from Kobotoolbox server was found", "NSAP-ODK Database");
                    }
                    rowJsonFiles.Height = new GridLength(1, GridUnitType.Star);
                    break;
                case "menuDeletePastDate":
                    DeleteUnloadPastDateWindow dpw = new DeleteUnloadPastDateWindow();
                    dpw.ShowDialog();
                    break;

                case "menuSaveJson":
                    //for saving the downloadd JSON text into a file.
                    if (await SaveJSONTextTask())
                    {
                        menuSaveJson.IsEnabled = false;
                        ((MainWindow)Owner).ShowSummary("Overall");
                    }

                    break;

                case "menuUploadMedia":
                    var serverForm = new DownloadFromServerWindow(this);
                    VesselUnloadServerRepository.ResetLists();
                    serverForm.ServerIntent = ServerIntent.IntentUploadMedia;
                    serverForm.Owner = this;
                    serverForm.ShowDialog();
                    break;

                case "menuVesselCountJSON":
                    try
                    {
                        var json = System.IO.File.ReadAllText(GetJsonTextFileFromFileOpenDialog());
                        if (json.Length > 0)
                        {
                            LandingSiteBoatLandingsFromServerRepository.JSON = json;
                            LandingSiteBoatLandingsFromServerRepository.CreateLandingSiteBoatLandingsFromJson();
                            ODKServerDownload = ODKServerDownload.ServerDownloadLandings;
                            MainSheetsLanding = LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings;
                        }
                    }
                    catch
                    {
                        //ignore
                    }
                    break;

                //get vessel unloads from json text file
                case "menuVesselUnloadJSON":
                    _jsonFileUseCreationDateForHistory = null;
                    try
                    {
                        FileInfo fi = new FileInfo(GetJsonTextFileFromFileOpenDialog());

                        var result = MessageBox.Show($"File was created on {fi.CreationTime.ToString("MMM-dd-yyyy HH:mm")}\r\n" +
                                            "Would you like to use this date on the download history?",
                                            "NSAP-ODK Database",
                                            MessageBoxButton.YesNoCancel,
                                            MessageBoxImage.Question);

                        if (result == MessageBoxResult.Cancel)
                        {
                            return;
                        }
                        else if (result == MessageBoxResult.Yes)
                        {
                            _jsonFileUseCreationDateForHistory = fi.CreationTime;
                        }

                        var json = System.IO.File.ReadAllText(fi.FullName);
                        if (json.Length > 0)
                        {
                            VesselUnloadServerRepository.ResetLists();
                            if (json.Contains("species_data_group"))
                            {
                                VesselUnloadServerRepository.JSON = VesselLandingFixDownload.JsonNewToOldVersion(json);
                                //VesselUnloadServerRepository.JSON = JsonNewToOldVersion(json);
                            }
                            else
                            {
                                VesselUnloadServerRepository.JSON = json;
                            }
                            VesselUnloadServerRepository.CreateLandingsFromJSON();
                            VesselUnloadServerRepository.FillDuplicatedLists();
                            ODKServerDownload = ODKServerDownload.ServerDownloadVesselUnload;
                            MainSheets = VesselUnloadServerRepository.VesselLandings;
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Log(ex);
                    }
                    break;

                case "menuSaveToExcel":
                    if (dataGridExcel.ItemsSource != null)
                    {
                        string filePath;
                        string exportResult;
                        if (ExportExcel.GetSaveAsExcelFileName(this, out filePath))
                        {
                            EntitiesToDataTables.VesselLandings = VesselUnloadServerRepository.VesselLandings;
                            if (ExportExcel.ExportDatasetToExcel(EntitiesToDataTables.GenerateDataSeFromImport(), filePath))
                            {
                                exportResult = "Successfully exported to excel";
                            }
                            else
                            {
                                exportResult = $"Was not successfull in exporting to excel\r\n{ExportExcel.ErrorMessage}";
                            }

                            MessageBox.Show(exportResult, "Export", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    break;

                case "menuDownloadFromServer":
                    OpenServerWindow();
                    break;

                case "menuClearTables":
                    ClearTables();
                    break;

                case "menuUpload":
                case "menuUploadJsonFile":
                    VesselUnloadServerRepository.CancelUpload = false;
                    if(!Global.Settings.UsemySQL)
                    {
                        NSAPEntities.ClearCSVData();
                        VesselUnloadServerRepository.ResetTotalUploadCounter();
                        VesselUnloadServerRepository.DelayedSave = true;
                    }

                    await Upload();
                    if (VesselUnloadServerRepository.DelayedSave && VesselUnloadServerRepository.TotalUploadCount > 0)
                    {
                        if (await CreateTablesInAccess.UploadImportJsonResultAsync())
                        {
                           var r =  MessageBox.Show("Finished uploading JSON history files to the database\r\n\r\nWill you upload additional JSON files?", "NSAP-ODK Database", MessageBoxButton.YesNo, MessageBoxImage.Information);
                            if(r==MessageBoxResult.No)
                            {
                                Close();
                            }
                        }

                    }


                    break;

                case "menuImport":
                    GetExcelFromFileOpen();
                    break;

                case "menuClose":
                    Close();
                    break;
            }
        }
        private void OpenServerWindow(bool refreshDBSummary = false)
        {
            var serverForm = new DownloadFromServerWindow(this);
            ResetView();

            rowGrid.Height = new GridLength(1, GridUnitType.Star);
            VesselUnloadServerRepository.ResetLists();
            serverForm.Owner = this;
            serverForm.RefreshDatabaseSummry = refreshDBSummary;
            serverForm.ShowDialog();
        }
        public async Task<bool> SetResolvedFishingGroundLandings(List<VesselLanding> resolvedLandings)
        {
            VesselUnloadServerRepository.UploadSubmissionToDB -= OnUploadSubmissionToDB;
            _resolvedFishingGroundLandings = resolvedLandings;
            return await ProcessResolvedLandings(_resolvedFishingGroundLandings);

        }
        private void ViewUnrecognizedFishingGrounds()
        {
            UnrecognizedFGsWindows urgw = new UnrecognizedFGsWindows();
            urgw.Owner = this;

            urgw.UnrecognizedFishingGrounds = new CollectedUnrecognizedFG
            {
                DateCreated = (DateTime)_unrecognizedFGDateCreated,
                UnrecognizedFishingGrounds = _unrecognizedFishingGrounds
            };

            urgw.ShowDialog();
            _unrecognizedFGAlredyViewed = true;
        }
        private bool ClearTables(bool verboseMode = true)
        {
            bool proceed = false;
            if (Global.Settings.UsemySQL)
            {
                proceed = NSAPMysql.MySQLConnect.DeleteDataFromTables(useScript: true);
            }
            else if (NSAPEntities.ClearNSAPDatabaseTables())
            {
                proceed = true;
                NSAPEntities.LandingSiteSamplingViewModel.Clear();
                NSAPEntities.SummaryItemViewModel.Clear();
            }


            if (proceed)
            {
                ((MainWindow)Owner).ShowDBSummary();
                if (verboseMode)
                {
                    MessageBox.Show("All repo cleared");
                }
            }
            return proceed;
        }
        private async Task ProcessXFormIDs(bool locateUnsavedFromServer = false)
        {
            if (!VesselUnloadServerRepository.CancelUpload)
            {
                int updateCount = await VesselUnloadServerRepository.ProcessXFormIDsAsync(locateUnsavedFromServer);
                _updateXFormIDCount += updateCount;
                if (updateCount > 0)
                {
                    TimedMessageBox.Show(
                        "Finished updating XFormIdentifier to database\r\n" +
                        $"from source having {VesselUnloadServerRepository.VesselLandings.Count} records with {updateCount} saved\r\n",
                        "NSAP-ODK Database",
                        5000,
                        System.Windows.Forms.MessageBoxButtons.OK);
                }
            }
        }
        private async Task Upload(bool verbose = true)
        {
            string msg = "";
            _ufg_count = 0;
            _uploadToDBSuccess = false;
            bool success = false;
            labelProgress.Content = "";

            if (ODKServerDownload == ODKServerDownload.ServerDownloadVesselUnload && !VesselUnloadServerRepository.CancelUpload)
            {
                if (_isJSONData)
                {

                    if (_targetGrid.Items.Count > 0)
                    {
                        VesselUnloadServerRepository.JSONFileCreationTime = _jsonFileUseCreationDateForHistory;
                        if (await VesselUnloadServerRepository.UploadToDBAsync())
                        {
                            _targetGrid.ItemsSource = null;
                            _targetGrid.ItemsSource = VesselUnloadServerRepository.VesselLandings;
                            int sourceCount = VesselUnloadServerRepository.VesselLandings.Count;
                            int savedCount = VesselUnloadServerRepository.VesselLandings.Count(t => t.SavedInLocalDatabase == true);
                            success = true;
                            _uploadToDBSuccess = true;

                            if (JSON != null && (_jsonfiles == null || _jsonfiles.Count == 0) && await SaveJSONTextTask(verbose: false))
                            {
                                msg = "Finished uploading to database\r\n" +
                                       $"from source having {sourceCount} records with {savedCount} saved\r\n" +
                                       $"and saving JSON file to {Global.Settings.JSONFolder}";


                            }
                            else
                            {
                                msg = "Finished uploading JSON file to database\r\n" +
                                    $"from source having {sourceCount} records with {savedCount} saved\r\n";
                            }
                        }
                        else if (_savedCount == 0 && VesselUnloadServerRepository.VesselLandings.Count > 0)
                        {
                            msg = "All records already saved to the database";
                        }


                        if (_ufg_count > 0)
                        {
                            msg += $"\r\n\r\nThere were {_ufg_count} landings with unrecognized fishing grounds";
                        }

                        if (!VesselUnloadServerRepository.DelayedSave || _savedCount==0)
                        {
                            TimedMessageBox.Show(msg, "NSAP-ODK Database", 5000);
                        }

                        if (success)
                        {
                            ((MainWindow)Owner).SetDataDisplayMode();
                        }
                    }
                    else
                    {
                        msg = "You do not have any downloaded data";
                        TimedMessageBox.Show(
                            msg,
                            "NSAP-ODK Database",
                            5000);
                        //MessageBox.Show("You do not have any downloaded data", "No data", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
                else
                {
                    if (dataGridExcel.Items.Count == 0)
                    {
                        MessageBox.Show("You do not have any downloaded data", "No data", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    else
                    {
                        if (await ImportExcel.UploadToDatabaseAsync())
                        {
                            dataGridExcel.ItemsSource = null;
                            dataGridExcel.ItemsSource = ImportExcel.ExcelMainSheets;
                            success = true;
                            _uploadToDBSuccess = true;
                            MessageBox.Show("Finished uploading to database", "Upload done", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                        else if (_savedCount == 0)
                        {
                            MessageBox.Show("Zero records were saved because all have been saved earlier");
                        }
                    }
                }
            }
            else if (ODKServerDownload == ODKServerDownload.ServerDownloadLandings)
            {
                if (_isJSONData)
                {
                    if (await LandingSiteBoatLandingsFromServerRepository.UploadToDBAsync())
                    {
                        dataGridExcel.ItemsSource = null;
                        dataGridExcel.ItemsSource = LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings;
                        int result = NSAPEntities.GearUnloadViewModel.FixGearUnload();
                        success = true;
                        if (result > 0)
                        {
                            MessageBox.Show($"Finished uploading to database and fixed {result} gear unloads", "Upload done", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                        else
                        {
                            MessageBox.Show("Finished uploading to database", "Upload done", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    else if (_savedCount == 0 && LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings.Count > 0)
                    {
                        MessageBox.Show("All records already saved to the database");
                    }
                    else
                    {
                        MessageBox.Show("No records were saved even though at least one should have been saved.\r\nPls contact developer");
                    }
                }
            }

            if (success)
            {
                ParentWindow?.RefreshDownloadHistory();
            }
        }
        private string VersionFromJSON(string json)
        {
            string versionNumber = "";
            if (json.Contains("Version "))
            {
                int index = json.IndexOf("Version ");
                versionNumber = json.Substring(index + 8, 4).Trim();
            }
            return versionNumber;
        }
        public List<UnrecognizedFishingGround> UnrecognizedFishingGrounds
        {
            get { return _unrecognizedFishingGrounds.OrderBy(t => t.SamplingDate).ToList(); }
        }
        private void OnUploadSubmissionToDB(object sender, UploadToDbEventArg e)
        {
            switch (e.Intent)
            {
                case UploadToDBIntent.Searching:

                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              progressBar.IsIndeterminate = true;
                              //do what you need to do on UI Thread
                              return null;
                          }), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              labelProgress.Content = "Searching...";

                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);
                    break;
                case UploadToDBIntent.UnloadFound:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              progressBar.Value = e.VesselUnloadFoundCount;
                              //do what you need to do on UI Thread
                              return null;
                          }), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              labelProgress.Content = "Please wait...";

                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);
                    break;
                case UploadToDBIntent.SearchingUpdates:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              progressBar.IsIndeterminate = true;
                              //do what you need to do on UI Thread
                              return null;
                          }), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              labelProgress.Content = "Please wait...";

                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);
                    break;
                case UploadToDBIntent.Cancelled:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              progressBar.Value = e.VesselUnloadTotalSavedCount;
                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);
                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              labelProgress.Content = $"Uploading was cancelled with {e.VesselUnloadTotalSavedCount} submissions";
                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);

                    _savedCount = e.VesselUnloadTotalSavedCount;
                    break;
                case UploadToDBIntent.EndOfUpload:
                case UploadToDBIntent.EndOfUpdate:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              progressBar.IsIndeterminate = false;
                              progressBar.Value = 0;
                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              if (e.Intent == UploadToDBIntent.EndOfUpload)
                              {
                                  labelProgress.Content = $"Finished uploading {e.VesselUnloadTotalSavedCount} submissions";
                              }
                              else
                              {
                                  labelProgress.Content = $"Finished updating {e.VesselUnloadUpdatedCount} submissions";
                              }
                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);

                    _savedCount = e.VesselUnloadTotalSavedCount;


                    if (VesselUnloadServerRepository.UnrecognizedFishingGrounds?.Count > 0)
                    {
                        _ufg_count = VesselUnloadServerRepository.UnrecognizedFishingGrounds.Count;
                        _unrecognizedFishingGrounds.AddRange(VesselUnloadServerRepository.UnrecognizedFishingGrounds);
                        //SetUpHashSet(VesselUnloadServerRepository.UnrecognizedFishingGrounds);

                        if (_unrecognizedFGDateCreated == null)
                        {
                            _unrecognizedFGDateCreated = DateTime.Now;
                            menuUnrecognizedFG.Dispatcher.BeginInvoke
                                (
                                DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                                {
                                    menuUnrecognizedFG.Visibility = Visibility.Visible;
                                    return null;
                                }
                                ), null);
                        }
                        VesselUnloadServerRepository.ClearUnrecgnizedFishingGroundsList();
                    }
                    break;

                case UploadToDBIntent.StartOfUpload:
                case UploadToDBIntent.StartOfUpdate:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {
                              progressBar.IsIndeterminate = false;
                              if (e.Intent == UploadToDBIntent.StartOfUpload)
                              {
                                  progressBar.Maximum = e.VesselUnloadToSaveCount;
                              }
                              else
                              {
                                  progressBar.Maximum = e.VesselUnloadToUpdateCount;
                              }
                              //do what you need to do on UI Thread
                              return null;
                          }), null);
                    break;
                case UploadToDBIntent.UpdateFound:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                            {
                                progressBar.IsIndeterminate = false;
                                //do what you need to do on UI Thread
                                return null;
                            }
                         ), null);
                    break;
                case UploadToDBIntent.Updating:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                            {

                                progressBar.Value = e.VesselUnloadFoundCount;

                                //do what you need to do on UI Thread
                                return null;
                            }
                         ), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              labelProgress.Content = $"Updating {(int)progressBar.Value} of {(int)progressBar.Maximum} submissions";

                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);

                    break;
                case UploadToDBIntent.Uploading:
                    progressBar.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                            {

                                progressBar.Value = e.VesselUnloadSavedCount;

                                //do what you need to do on UI Thread
                                return null;
                            }
                         ), null);

                    labelProgress.Dispatcher.BeginInvoke
                        (
                          DispatcherPriority.Normal, new DispatcherOperationCallback(delegate
                          {

                              labelProgress.Content = $"Uploading {(int)progressBar.Value} of {(int)progressBar.Maximum} submissions";

                              //do what you need to do on UI Thread
                              return null;
                          }
                         ), null);

                    break;

            }
        }
        public HashSet<UnrecognizedFishingGround> UnrecognizedFishingGroundsHashSet { get; private set; }
        private void SetUpHashSet(List<UnrecognizedFishingGround> ufgs)
        {
            if (UnrecognizedFishingGroundsHashSet == null)
            {
                UnrecognizedFishingGroundsHashSet = new HashSet<UnrecognizedFishingGround>(new UnrecognizedFishingGroundComparer());
            }
            foreach (var item in ufgs.OrderBy(t => t.RowID))
            {
                UnrecognizedFishingGroundsHashSet.Add(item);
            }
        }

        private Style AlignRightStyle
        {
            get
            {
                Style alignRightCellStype = new Style(typeof(DataGridCell));

                // Create a Setter object to set (get it? Setter) horizontal alignment.
                Setter setAlign = new
                    Setter(HorizontalAlignmentProperty,
                    HorizontalAlignment.Right);

                // Bind the Setter object above to the Style object
                alignRightCellStype.Setters.Add(setAlign);
                return alignRightCellStype;
            }
        }

        private void ShowResultFromAPI(string result)
        {
            DataGridTextColumn col;
            _targetGrid.ItemsSource = null;
            _targetGrid.Columns.Clear();
            _targetGrid.IsReadOnly = true;
            _targetGrid.AutoGenerateColumns = false;
            switch (result)
            {
                case "landingSiteSampling":
                    _targetGrid.ItemsSource = LandingSiteBoatLandingsFromServerRepository.LandingSiteBoatLandings;
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "RowUUID", Binding = new Binding("_uuid"), Visibility = Visibility.Hidden });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("_submission_time"),
                        Header = "Date and time submitted",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("SavedInLocalDatabase") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Device ID", Binding = new Binding("device_id") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Form version", Binding = new Binding("intronote") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SamplingDate"),
                        Header = "Sampling date",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Sampling day", Binding = new Binding("SamplingConducted") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("NSAPRegionName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("NSAPEnumeratorName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("FMA") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("FishingGround") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Notes", Binding = new Binding("Notes") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });

                    break;

                case "landingSiteCounts":
                    _targetGrid.ItemsSource = LandingSiteBoatLandingsFromServerRepository.GetLandings();
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Sampling date",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Sampling day", Binding = new Binding("Parent.SamplingConducted") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("Parent.NSAPRegionName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("Parent.NSAPEnumeratorName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.FMA") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Gear", Binding = new Binding("GearName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Vessels landed", Binding = new Binding("Count"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Total catch weight", Binding = new Binding("TotalCatchWt"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Notes", Binding = new Binding("Note") });
                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("SavedInLocalDatabase") });
                    //_targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent", Binding = new Binding("Parent.PK"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK"), CellStyle = AlignRightStyle });
                    break;

                case "effort":
                    _targetGrid.ItemsSource = VesselUnloadServerRepository.VesselLandings;
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "RowUUID", Binding = new Binding("_uuid"), Visibility = Visibility.Hidden });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("_submission_time"),
                        Header = "Date and time submitted",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("SavedInLocalDatabase") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Device ID", Binding = new Binding("device_id") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Form version", Binding = new Binding("intronote") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SamplingDate"),
                        Header = "Sampling date",
                        CellStyle = AlignRightStyle
                    };

                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("EnumeratorName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("GearName") });
                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Fishing boat is used", Binding = new Binding("IsBoatUsed") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Number of fishers", Binding = new Binding("NumberOfFishers"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Successful trip", Binding = new Binding("TripIsSuccess") });
                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Trip is completed", Binding = new Binding("TripIsCompleted") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Weight of catch", Binding = new Binding("CatchTotalWt"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Weight of sample", Binding = new Binding("CatchSampleWt"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Number of boxes", Binding = new Binding("BoxesTotal"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Number of boxes sampled", Binding = new Binding("BoxesSampled"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Raising factor", Binding = new Binding("RaisingFactor"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Includes catch composition", Binding = new Binding("IncludeCatchComposition") });

                    _targetGrid.Columns.Add(new DataGridCheckBoxColumn { Header = "Vessel tracking", Binding = new Binding("IncludeTracking") });

                    col = new DataGridTextColumn()
                    {
                        //Binding = new Binding("TimeDepartLandingSite"),
                        Binding = new Binding("DateTimeDepartLandingSite"),
                        Header = "Departure from landing site",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeArriveLandingSite"),
                        Header = "Arrival at landing site",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "GPS", Binding = new Binding("GPS.AssignedName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Remarks", Binding = new Binding("Remarks") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    break;

                case "grid":
                    _targetGrid.ItemsSource = VesselUnloadServerRepository.GetGridBingoCoordinates();

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "UTM zone", Binding = new Binding("Parent.UTMZone") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Bingo coordinate", Binding = new Binding("CompleteGridName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Coordinates", Binding = new Binding("Grid25Cell.Coordinate") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "UTM Coordinates", Binding = new Binding("Grid25Cell.UTMCoordinate") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;

                case "soakTime":
                    _targetGrid.ItemsSource = VesselUnloadServerRepository.GetGearSoakTimes();

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled",
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SetTime"),
                        Header = "Date and time of gear set".Length,
                        CellStyle = AlignRightStyle
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("HaulTime"),
                        Header = "Date and time of gear haul"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Waypoint at set", Binding = new Binding("WaypointAtSet") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Waypoint at haul", Binding = new Binding("WaypointAtHaul") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });

                    break;

                case "effortSpecs":
                case "duplicatedEffort":
                    if (result == "effortSpecs")
                    {
                        _targetGrid.ItemsSource = VesselUnloadServerRepository.GetGearEfforts();
                    }
                    else
                    {
                        _targetGrid.ItemsSource = VesselUnloadServerRepository.DuplicatedEffortSpec;
                    }

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Effort specification", Binding = new Binding("EffortSpecName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Value", Binding = new Binding("SelectedEffortMeasure") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });

                    break;

                case "catchComposition":
                case "duplicatedCatchComp":
                    if (result == "catchComposition")
                    {
                        _targetGrid.ItemsSource = VesselUnloadServerRepository.GetCatchCompositions();
                    }
                    else
                    {
                        _targetGrid.ItemsSource = VesselUnloadServerRepository.DuplicatedCatchComposition;
                    }

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    _targetGrid.Columns.Add(col);

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Taxa.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("SpeciesNameSelected") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("SpeciesWt"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sample weight", Binding = new Binding("SpeciesSampleWt"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;

                case "lengths":
                    _targetGrid.ItemsSource = VesselUnloadServerRepository.GetLengthList();

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;

                case "lengthWeight":
                    _targetGrid.ItemsSource = VesselUnloadServerRepository.GetLenWtList();

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;

                case "lengthFreq":
                case "duplicatedLenFreq":
                    if (result == "lengthFreq")
                    {
                        _targetGrid.ItemsSource = VesselUnloadServerRepository.GetLenFreqList();
                    }
                    else
                    {
                        _targetGrid.ItemsSource = VesselUnloadServerRepository.DuplicatedLenFreq;
                    }

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Length class", Binding = new Binding("LengthClass"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Frequency", Binding = new Binding("Frequency"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;

                case "gms":
                    _targetGrid.ItemsSource = VesselUnloadServerRepository.GetGMSList();

                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.user_name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.FishingGround.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.FishingVesselName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa.Name") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesNameSelected") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Sex", Binding = new Binding("Sex") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Gonad maturity", Binding = new Binding("GMS") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Gonad weight", Binding = new Binding("GonadWeight"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Stomach content weight", Binding = new Binding("StomachContentWt"), CellStyle = AlignRightStyle });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Stomach content category", Binding = new Binding("GutContentCategory") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("PK") });
                    _targetGrid.Columns.Add(new DataGridTextColumn { Header = "Parent ID", Binding = new Binding("Parent.PK") });
                    break;
            }
        }

        private void ShowResultFromExcel(string result)
        {
            DataGridTextColumn col;
            dataGridExcel.ItemsSource = null;
            dataGridExcel.Columns.Clear();
            switch (result)
            {
                case "effort":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelMainSheets;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "RowUUID", Binding = new Binding("RowUUID"), Visibility = Visibility.Hidden });

                    //dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Date and time submitted", Binding = new Binding("DateTimeSubmitted") });
                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeSubmitted"),
                        Header = "Date and time submitted"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Saved to database", Binding = new Binding("IsSaved") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Device ID", Binding = new Binding("DeviceId") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Form version", Binding = new Binding("FormVersion") });

                    //dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sampling date", Binding = new Binding("SamplingDate") });
                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("SamplingDate"),
                        Header = "Sampling date"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP Region", Binding = new Binding("NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Enumerator", Binding = new Binding("EnumeratorName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("GearName") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Fishing boat is used", Binding = new Binding("IsBoatUsed") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Sector") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Successful trip", Binding = new Binding("TripIsSuccess") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight of catch", Binding = new Binding("CatchWeightTotal") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight of sample", Binding = new Binding("CatchWeightSampled") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Number of boxes", Binding = new Binding("BoxesTotal") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Number of boxes sampled", Binding = new Binding("BoxesSampled") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Raising factor", Binding = new Binding("RaisingFactor") });
                    dataGridExcel.Columns.Add(new DataGridCheckBoxColumn { Header = "Vessel tracking", Binding = new Binding("TripIsTracked") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeDepartLandingSite"),
                        Header = "Departure from landing site"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeArriveLandingSite"),
                        Header = "Arrival at landing site"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "GPS", Binding = new Binding("GPS.AssignedName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Remarks", Binding = new Binding("Remarks") });

                    break;

                case "grid":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelBingoGroups;

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "UTM zone", Binding = new Binding("Parent.UTMZone") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Bingo coordinate", Binding = new Binding("BingoCoordinate") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Coordinates", Binding = new Binding("Grid25Grid.Coordinate") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "UTM Coordinates", Binding = new Binding("Grid25Grid.UTMCoordinate") });

                    break;

                case "soakTime":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelSoakTimes;

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeSet"),
                        Header = "Date and time of gear set"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("DateTimeHaul"),
                        Header = "Date and time of gear haul"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Waypoint at set", Binding = new Binding("GPSWaypointAtSet") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Waypoint at haul", Binding = new Binding("GPSWaypointAtHaul") });

                    break;

                case "effortSpecs":
                case "duplicatedEffort":
                    if (result == "effortSpecs")
                    {
                        dataGridExcel.ItemsSource = ImportExcel.ExcelEffortRepeats;
                    }
                    else
                    {
                    }

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Effort specification", Binding = new Binding("EffortSpecification") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Value", Binding = new Binding("EfforValueText") });

                    break;

                case "catchComposition":
                case "duplicatedCatchComp":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelCatchCompositions;

                    col = new DataGridTextColumn()
                    {
                        Binding = new Binding("Parent.SamplingDate"),
                        Header = "Date and time sampled"
                    };
                    col.Binding.StringFormat = "MMM-dd-yyyy HH:mm";
                    dataGridExcel.Columns.Add(col);

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("SpeciesWeight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sample weight", Binding = new Binding("SpeciesSampleWeight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Notes", Binding = new Binding("Notes") });
                    break;

                case "lengths":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelLengthLists;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    break;

                case "lengthWeight":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelLengthWeights;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight") });
                    break;

                case "lengthFreq":
                case "duplicatedLenFreq":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelLenFreqs;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length class", Binding = new Binding("LengthClass") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Frequency", Binding = new Binding("Frequency") });
                    break;

                case "gms":
                    dataGridExcel.ItemsSource = ImportExcel.ExcelGMSes;

                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "User name", Binding = new Binding("Parent.Parent.UserName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "NSAP region", Binding = new Binding("Parent.Parent.NSAPRegion.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "FMA", Binding = new Binding("Parent.Parent.NSAPRegionFMA.FMA.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing ground", Binding = new Binding("Parent.Parent.NSAPRegionFMAFishingGround.FishingGround.Name") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Landing site", Binding = new Binding("Parent.Parent.LandingSiteName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing vessel", Binding = new Binding("Parent.Parent.VesselName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sector", Binding = new Binding("Parent.Parent.Sector") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Fishing gear", Binding = new Binding("Parent.Parent.GearName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Taxa", Binding = new Binding("Parent.Taxa") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Name of catch", Binding = new Binding("Parent.SpeciesName") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Length", Binding = new Binding("Length") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Weight", Binding = new Binding("Weight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Sex", Binding = new Binding("Sex") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Gonad maturity", Binding = new Binding("GonadMaturity") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Stomach content weight", Binding = new Binding("StomachContentWeight") });
                    dataGridExcel.Columns.Add(new DataGridTextColumn { Header = "Stomach content category", Binding = new Binding("GutContentClassification") });
                    break;
            }
        }

        private void OnMenuItemChecked(object sender, RoutedEventArgs e)
        {
            var menuTag = ((MenuItem)sender).Tag.ToString();
            menuUpload.IsEnabled = menuTag == "effort" || menuTag == "landingSiteSampling";
            if (_isJSONData)
            {
                if (_jsonfiles != null && _jsonfiles.Count > 0)
                {
                    ShowResultFromAPI(menuTag);
                }
                else
                {
                    ShowResultFromAPI(menuTag);
                }
            }
            else
            {
                ShowResultFromExcel(menuTag);
            }

            labelDuplicated.Content = string.Empty;
            switch (menuTag)
            {
                case "effortSpecs":

                    if (VesselUnloadServerRepository.DuplicatedEffortSpec.Count > 0)
                    {
                        labelDuplicated.Content = "Effort specs are duplicated";
                    }
                    break;

                case "catchComposition":

                    if (VesselUnloadServerRepository.DuplicatedCatchComposition.Count > 0)
                    {
                        labelDuplicated.Content = "Catch composition items are duplicated";
                    }
                    break;

                case "lengthFreq":

                    if (VesselUnloadServerRepository.DuplicatedCatchComposition.Count > 0)
                    {
                        labelDuplicated.Content = "Length classes are duplicated";
                    }
                    break;
            }

            foreach (var mi in menuView.Items)
            {
                if (mi.GetType().Name != "Separator")
                {
                    var menu = (MenuItem)mi;
                    if (menu.Name != ((MenuItem)e.Source).Name)
                    {
                        menu.IsChecked = false;
                    }
                }
            }
        }

        private void OnDataGridSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
        }

        private void OnWindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (VesselUnloadServerRepository.UploadInProgress || VesselUnloadServerRepository.UpdateInProgress)
            {
                string mode = "Updating";
                if (VesselUnloadServerRepository.UpdateInProgress)
                {
                    mode = "Uploading";
                }
                if (MessageBox.Show(
                    $"{mode} is in progress\n\rDo you want to stop the operation",
                    "NSAP-ODK Database",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question
                    ) == MessageBoxResult.Yes)
                {
                    VesselUnloadServerRepository.CancelUpload = true;
                }
                else
                {
                    e.Cancel = true;
                }
            }

            if (!e.Cancel)
            {
                this.SavePlacement();
                ImportExcel.UploadSubmissionToDB -= OnUploadSubmissionToDB;
                VesselUnloadServerRepository.UploadSubmissionToDB -= OnUploadSubmissionToDB;
                if (!_unrecognizedFGAlredyViewed && _unrecognizedFishingGrounds.Count > 0)
                {
                    if (MessageBox.Show(
                        "There were unrecognized fishing grounds in the data that was uploaded\r\n\r\n" +
                        "Select 'Yes' to see them.",
                        "NSAP-ODK Database",
                        MessageBoxButton.YesNo,
                        MessageBoxImage.Question) == MessageBoxResult.Yes
                        )
                    {
                        e.Cancel = true;
                        ViewUnrecognizedFishingGrounds();
                    }
                }
            }
        }

        private void ProcessJsonFileForDisplay(FileInfoJSONMetadata fm)
        {
            rowJSONGrid.Height = new GridLength(1, GridUnitType.Star);
            JSON = File.ReadAllText(fm.JSONFile.FullName);
            VesselUnloadServerRepository.JSON = JSON;
            VesselUnloadServerRepository.CreateLandingsFromJSON();
            _historyJSONFileForUploading = fm.JSONFile.Name;

            VesselUnloadServerRepository.ResetLists();
            SetMenus();
            gridJSONContent.Visibility = Visibility.Visible;

            if (fm.DownloadedJsonMetadata != null)
            {
                DownloadedJsonMetadata djmd = fm.DownloadedJsonMetadata;

                if (_jsonFileForUploadCount != null)
                {
                    labelJSONFile.Content = $"JSON file from {djmd.DBOwner} {djmd.FormName} {djmd.DateDownloaded} # {fm.ItemNumber} of {_jsonFileForUploadCount}";
                }
                else
                {
                    labelJSONFile.Content = $"JSON file from {djmd.DBOwner} {djmd.FormName} {djmd.DateDownloaded}";
                }
            }
            else
            {
                labelJSONFile.Content = $"({fm.ItemNumber} of {_jsonFileForUploadCount}) JSON file from {fm.JSONFile.Name}: # of items - {VesselUnloadServerRepository.VesselLandings.Count} ";
            }
        }

        private void OnDataGridLoadingRow(object sender, DataGridRowEventArgs e)
        {
            e.Row.Header = (e.Row.GetIndex() + 1).ToString();
        }

        private void OnTreeviewItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            rowJSONGrid.Height = new GridLength(0);
            rowJSONMetadata.Height = new GridLength(0);

            labelJSONFile.Content = "";
            gridJSONContent.Visibility = Visibility.Collapsed;
            _isJSONData = false;
            _jsonDateDownloadnode = null;

            if (treeViewJSONNavigator.HasItems)
            {
                string itemTag = ((TreeViewItem)treeViewJSONNavigator.SelectedItem).Tag?.ToString();
                switch (itemTag)
                {
                    case "NSAP_ODK.Entities.Database.FileInfoJSONMetadata":
                        var md = (FileInfoJSONMetadata)((TreeViewItem)e.NewValue).Tag;
                        ProcessJsonFileForDisplay(md);
                        _jsonFileUseCreationDateForHistory = md.JSONFile.CreationTime;
                        break;
                    case "NSAP_ODK.Entities.Database.DownloadedJsonMetadata":
                        ShowJSONMetadata((DownloadedJsonMetadata)((TreeViewItem)treeViewJSONNavigator.SelectedItem).Tag);
                        _jsonFileForUploadCount = ((TreeViewItem)treeViewJSONNavigator.SelectedItem).Items.Count;
                        break;
                    default:
                        try
                        {
                            if (File.Exists(itemTag))
                            {
                                FileInfoJSONMetadata fjmd = new FileInfoJSONMetadata { JSONFile = new FileInfo(itemTag) };
                                _jsonFileUseCreationDateForHistory = fjmd.JSONFile.CreationTime;
                                ProcessJsonFileForDisplay(fjmd);
                            }
                        }
                        catch
                        {
                            //ignore
                        }
                        break;

                }

                if (DateTime.TryParse(((TreeViewItem)treeViewJSONNavigator.SelectedItem).Header.ToString(), out DateTime v))
                {
                    _jsonDateDownloadnode = treeViewJSONNavigator.SelectedItem as TreeViewItem;
                }
            }

        }

        private void ClearJSONTreeRootNodes()
        {
            treeViewJSONNavigator.Items.Clear();
        }
        private void ShowJSONMetadata(DownloadedJsonMetadata djmd)
        {
            labelJSONFile.Content = $"Metadata for selected downloaded JSON files downloaded on {djmd.DateDownloaded:MMM-dd-yyyy HH:mm}";
            rowJSONMetadata.Height = new GridLength(1, GridUnitType.Star);
            propertyGridMetadata.SelectedObject = djmd;
            propertyGridMetadata.AutoGenerateProperties = true;
        }
        private void OnTreeMouseRightButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            ContextMenu cm = new ContextMenu();
            MenuItem m = null;
            string tag = ((TreeViewItem)treeViewJSONNavigator.SelectedItem).Tag?.ToString();

            if (DateTime.TryParse(((TreeViewItem)treeViewJSONNavigator.SelectedItem).Header.ToString(), out DateTime v))
            {

                var metadata = (DownloadedJsonMetadata)((TreeViewItem)treeViewJSONNavigator.SelectedItem).Tag;

                //when the date node of downloaded JSON file tree node is selected 
                if (metadata.DownloadType == "all")
                {

                    m = new MenuItem { Header = "Reupload all", Name = "menuReuploadAll" };
                    m.Click += OnMenuClick;
                    cm.Items.Add(m);

                    m = new MenuItem { Header = "Update xFormIdentifier", Name = "menuUpdateXformIdentifier" };
                    m.Click += OnMenuClick;
                    cm.Items.Add(m);

                    m = new MenuItem { Header = "Update landing sites", Name = "menuUpdateLandingSites" };
                    m.Click += OnMenuClick;
                    cm.Items.Add(m);

                    m = new MenuItem { Header = "Locate unsaved landings uploaded to the server", Name = "menuLocateUnsaved" };
                    m.Click += OnMenuClick;
                    cm.Items.Add(m);

                    if (Debugger.IsAttached)
                    {
                        m = new MenuItem { Header = "Locate missing landing site infor", Name = "menuLocateMissingLSInfo" };
                        m.Click += OnMenuClick;
                        cm.Items.Add(m);
                    }
                }
                else
                {
                    //when root node of json tree view of downloaded JSON is selected but download type is not download all from server
                    m = new MenuItem { Header = "Upload all", Name = "menuUploadAllJsonFiles" };
                    m.Click += OnMenuClick;
                    cm.Items.Add(m);
                }

            }
            else if (File.Exists(tag))
            {
                FileInfo fi = new FileInfo(tag);
                if (fi.Extension.ToLower() == ".json")
                {

                    //when a single history json node is clicked in the treeview
                    _isJSONData = true;
                    m = new MenuItem { Header = "Upload", Name = "menuUploadJsonFile" };
                    m.Click += OnMenuClick;
                    cm.Items.Add(m);
                }
            }
            else if (tag != null && tag.Contains("FileInfoJSONMetadata"))
            {

                //when a singel downloaded JSON file is selected
                m = new MenuItem { Header = "Upload", Name = "menuUploadJsonFile" };
                m.Click += OnMenuClick;
                cm.Items.Add(m);
            }
            else if (((TreeViewItem)treeViewJSONNavigator.SelectedItem).Header.ToString() == "Upload history JSON files")
            {
                //when root node of history json tree view is clicked
                m = new MenuItem { Header = "Upload all", Name = "menuUploadAllJsonHistoryFiles" };
                m.Click += OnMenuClick;
                cm.Items.Add(m);
            }



            if (cm.Items.Count > 0)
            {
                cm.IsOpen = true;
            }
        }

        private void OnMouseWheel(object sender, System.Windows.Input.MouseWheelEventArgs e)
        {

            ScrollViewer scv = (ScrollViewer)sender;
            scv.ScrollToVerticalOffset(scv.VerticalOffset - e.Delta);
            e.Handled = true;

        }
    }
}